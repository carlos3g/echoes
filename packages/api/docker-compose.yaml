services:
  # api:
  #   restart: unless-stopped
  #   env_file: .env
  #   container_name: echoes-api
  #   build:
  #     context: .
  #   command: pnpm run start:dev
  #   tty: true
  #   working_dir: /app
  #   volumes:
  #     - .:/app
  #     - node_modules:/app/node_modules
  #   depends_on:
  #     - postgres
  #   ports:
  #     - '${API_PORT}:3000'
  #   networks:
  #     - echoesnetwork

  mailpit:
    image: 'axllent/mailpit:latest'
    ports:
      - '${FORWARD_MAILPIT_PORT:-1025}:1025'
      - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
    networks:
      - echoesnetwork

  postgres:
    image: postgres:10-alpine
    restart: unless-stopped
    container_name: echoes-postgres
    env_file: .env
    environment:
      POSTGRES_MULTIPLE_DATABASES: ${DB_DATABASE},${DB_DATABASE}_test
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_SCHEMA: ${DB_SCHEMA}
    ports:
      - '${DB_PORT}:5432'
    volumes:
      - ./postgres-scripts/:/docker-entrypoint-initdb.d/
      - echoes-db:/var/lib/postgresql/data
    networks:
      - echoesnetwork

  minio:
    image: 'minio/minio:latest'
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - 'echoes-minio:/data/minio'
    networks:
      - echoesnetwork
    command: 'minio server /data/minio --console-address ":8900"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:9000/minio/health/live'
      retries: 3
      timeout: 5s

  # see: https://stackoverflow.com/a/66485256/13274020
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb myminio/avatars;
      /usr/bin/mc policy set public myminio/avatars;
      exit 0;
      "
    networks:
      - echoesnetwork

volumes:
  echoes-db:
    driver: local
  node_modules:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./node_modules
  echoes-minio:
    driver: local

networks:
  echoesnetwork:
    driver: bridge
