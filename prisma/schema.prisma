generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DB_URL")
  relationMode = "foreignKeys"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                    BigInt                  @id @default(autoincrement()) @db.BigInt
  uuid                  String                  @unique
  name                  String
  email                 String                  @unique
  password              String
  emailVerifiedAt       DateTime?               @map("email_verified_at")
  passwordChangeRequest PasswordChangeRequest[]
  tags                  Tag[]
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  userOnFavoritable     UserOnFavoritable[]

  @@map("users")
}

model PasswordChangeRequest {
  token     String    @id
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt    @db.BigInt
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("password_change_request")
}

model Quote {
  id                BigInt              @id @default(autoincrement()) @db.BigInt
  uuid              String              @unique
  body              String
  author            Author?             @relation(fields: [authorId], references: [id])
  authorId          BigInt?             @db.BigInt
  sources           Source[]
  categories        Category[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  tagOnTaggable     TagOnTaggable[]     @relation("TagOnQuote")
  userOnFavoritable UserOnFavoritable[] @relation("UserOnQuote")

  @@map("quotes")
}

model Source {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  uuid      String   @unique
  title     String
  quote     Quote    @relation(fields: [quoteId], references: [id])
  quoteId   BigInt   @db.BigInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sources")
}

model Category {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  uuid      String   @unique
  title     String
  quotes    Quote[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Author {
  id                BigInt              @id @default(autoincrement()) @db.BigInt
  uuid              String              @unique
  name              String
  birthDate         DateTime            @map("birth_date")
  deathDate         DateTime?           @map("death_date")
  bio               String
  quotes            Quote[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  tagOnTaggable     TagOnTaggable[]     @relation("TagOnAuthor")
  userOnFavoritable UserOnFavoritable[] @relation("UserOnAuthor")

  @@map("authors")
}

model Tag {
  id            BigInt          @id @default(autoincrement()) @db.BigInt
  uuid          String          @unique
  title         String
  user          User            @relation(fields: [userId], references: [id])
  userId        BigInt          @db.BigInt
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  tagOnTaggable TagOnTaggable[]

  @@map("tags")
}

enum TaggableType {
  Author
  Quote
}

model TagOnTaggable {
  tag          Tag          @relation(fields: [tagId], references: [id])
  tagId        BigInt       @db.BigInt
  author       Author?      @relation("TagOnAuthor", fields: [taggableId], references: [id], map: "author_taggableId")
  quote        Quote?       @relation("TagOnQuote", fields: [taggableId], references: [id], map: "quote_taggableId")
  taggableId   BigInt       @map("taggable_id") @db.BigInt
  taggableType TaggableType @map("taggable_type")

  @@unique([tagId, taggableId, taggableType])
  @@map("tag_on_taggable")
}

enum FavoritableType {
  Author
  Quote
}

model UserOnFavoritable {
  user            User            @relation(fields: [userId], references: [id])
  userId          BigInt          @db.BigInt
  author          Author?         @relation("UserOnAuthor", fields: [favoritableId], references: [id], map: "author_favoritableId")
  quote           Quote?          @relation("UserOnQuote", fields: [favoritableId], references: [id], map: "quote_favoritableId")
  favoritableId   BigInt          @map("favoritable_id") @db.BigInt
  favoritableType FavoritableType @map("favoritable_type")

  @@unique([userId, favoritableId, favoritableType])
  @@map("user_on_favoritable")
}
